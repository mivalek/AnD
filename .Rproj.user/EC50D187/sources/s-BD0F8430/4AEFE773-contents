---
title: "Analysing Data Practical 1: Setup and Revision Worksheet"
author: "Dr Jennifer Mankin"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(kableExtra)
```

# Part 1: Complete Setup

Make sure you do all of these steps as soon as you arrive:

* Log into OneDrive and Canvas
* Open RStudio via the Software Hub
* Open the Analysing Data project file
* Download and open the RMarkdown and data files for that week
  + Update the Markdown heading (above) with your name
* Run the first (setup) code chunk

## General keyboard shortcuts

* Alt + Tab: Switch between open windows
* Ctrl + a: select all
* Ctrl + x: cut to clipboard
+ Ctrl + c: copy to clipboard
+ Ctrl + v: paste
+ Ctrl + shift + v: paste as plain text
+ Ctrl + z: undo
+ Ctrl + y: redo
+ Ctrl + s: save
+ Ctrl + f: find in page

For more, see Keyboard Shortcuts [for Windows](https://support.microsoft.com/en-gb/help/12445/windows-keyboard-shortcuts) and [for Macs](https://support.apple.com/en-us/HT201236) 

## RStudio keyboard shortcuts

+ Ctrl + Shift + m: %>% 
+ Highlight + (), [], {} etc.: encloses in those brackets
+ Esc: Interrupt currently executing command
+ In the Console
  - Ctrl + 2: Go to console
  - Up/Down: Navigate command history in Console
+ In Markdown
  - Ctrl + Shift + Enter: Run all of current code chunk
  - Ctrl + Enter: Run current line in code chunk

For more, see [Keyboard Shortcuts in RStudio/RMarkdown](https://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts).

# Part 2: R Practice and Scavenger Hunt

Once you have completed your basic setup, you can start practicing using R again. To do this, you will need to find some data hidden throughout the Analysing Data Canvas site to do some analysis.

Complete the tasks below with the required information. See "Hints", below, if you get stuck.

`r task()` Cleaning and managing data

`r subtask()` Run the following code to import a dataset: `tooth_tib <- as_tibble(ToothGrowth)`. Hint: see `?ToothGrowth` for more information about this dataset.

`r subtask()` Create a new summary table called `tooth_sum` from the dataset `tooth_tib` with the following steps. Use pipes (`%>%`) to put all of your changes into one command.

* Change the `dose` variable into a factor, with 0.5 as "low", 1 as "mid", and 2 as "high"
* Keep only rows for which `dose` is mid or high
* Keep only the `len` and `dose` variables
* Group the data by `dose`
* Create a summary table giving the mean and standard deviation of `len` and number of cases in each group
* View the table
```{r task1, include = solution, class = "solution"}
# Save the inbuilt dataset "ToothGrowth" as a tibble called "tooth_tib". 
# See ?ToothGrowth for information about this dataset.
tooth_tib <- as_tibble(ToothGrowth)

tooth_sum <- tooth_tib %>% 
  # Change the "dose" variable into a factor, with 0.5 as "low", 1 as "mid", and 2 as "high"
  mutate(dose = factor(dose, levels= c(.5, 1, 2), labels = c("low", "mid", "high"))) %>% 
  # Keep only rows for which "dose" is mid or high
  filter(dose %in% c("mid", "high")) %>% 
  # Keep only the "len" and "dose" variables
  # Here, by removing "-supp"; works equally well as select(len, dose))
  select(-supp) %>% 
  # Group the data by dose
  group_by(dose) %>% 
  # Create a summary table giving the mean and standard deviation of "len"
  # and number of cases in each group
  summarise(
    mean = mean(len),
    sd = sd(len),
    n = n()
  )

# Call your table see the results!
tooth_sum
```

`r subtask()` **Challenge**: use kable() to create a nicely formatted table with capitalised column names and the caption "Summary of Length for Mid and High Dose".

```{r task1challenge, include = solution, class = "solution"}
# Challenge task: use kable() to create a nicely formatted table
# Capitalise columns and add the caption "Summary of Length for Mid and High Dose"
tooth_sum %>% 
  kable(caption = "Summary of Length for Mid and High Dose", col.names = c("Dose", "M", "SD", "N")) %>% 
  kable_styling()
```
**Hint**: Use the following tutorials/practicals if you need help:

* [Creating factors](http://milton-the-cat.rocks/learnr/r/discovr_01/#section-data-types)
* [Filtering, selecting, and changing variables](http://milton-the-cat.rocks/learnr/r/discovr_01/#section-tibbles)
* [Creating a summary table](http://milton-the-cat.rocks/learnr/r/discovr_02/#section-creating-a-summary-table)
* Using `kable()`: Google it!

`r task()` Creating and visualising data

`r subtask()` Fill in the code below. For all of the values you are asked to find here, use ONLY the Analysing Data Canvas site. Ask a tutor if you get stuck!
 
 * Replace `x` with the maximum word limit for the lab report assessment
 * Replace `m` with the percentage of your total module mark that comes from the weekly quizzes
 * Replace `s` with the number of Research Participation credits you need to obtain via SONA
 
```{r task2setup, eval = FALSE}
random_tib <- tibble(
  group = factor(rep(c("ctrl", "exp"), each = 1000)),
  score = rnorm(
    n = x
    mean = m
    sd = s
  )
)
```

`r subtask()` Plot a histogram of the `score` variable in the `random_tib` dataset

```{r task2, include = solution, class = "solution"}
random_tib <- tibble(
  group = factor(rep(c("ctrl", "exp"), each = 1000)),
  score = rnorm(
    n = 2000, # replace x with the maximum word limit for the lab report assessment
    mean = 20, # replace m with the percentage of your total module mark that comes from the weekly quizzes
    sd = 16 # replace s with the number of Research Participation credits you need to obtain via SONA
  )
)

random_hist <- ggplot(random_tib, aes(score)) +
  geom_histogram()

# Call the saved plot to view it
random_hist
```

`r subtask()` **Challenge**: Try the following extra tasks:

* Set the fill hex colour to the last six digits of the University Counselling Service phone number
* Change the X axis label to "Score" and the Y axis label to "Count"
* Group by colour using the "group" variable
* Create side-by-side histograms, one for group = ctrl and one for group = exp

```{r task2challenge, include = solution, class = "solution"}
# Set the fill hex colour to the last six digits of the University Counselling Service phone number
ggplot(random_tib, aes(score)) +
  geom_histogram(fill = "#678156")
# Change the X axis label to "Score" and the Y axis label to "Count"
ggplot(random_tib, aes(score)) +
  geom_histogram(fill = "#678156") +
  labs(x = "Score", y = "Count")
# Group by colour using the "group" variable
ggplot(random_tib, aes(score, fill = group)) +
  geom_histogram() +
  labs(x = "Score", y = "Count")
# Challenge: Create side-by-side histograms, one for group = ctrl and one for group = exp
ggplot(random_tib, aes(score, fill = group)) +
  geom_histogram() +
  labs(x = "Score", y = "Count") +
  facet_wrap(~group)
```

**Hint**: Use the following tutorials/practicals if you need help:

* [Discovr Summarising Data: Histograms](http://milton-the-cat.rocks/learnr/r/discovr_02/#section-histograms)
* Challenge tasks: [Discovr Visualising Data: ggplot2](http://milton-the-cat.rocks/learnr/r/discovr_05/#section-boxplots-aka-box-whisker-plots)

`r task()` Using inline code to report results

`r subtask()` Create a new code chunk with two new objects, `people` and `blueshirt`, that contain the total number of people you can currently see and the number wearing blue shirts, respectively.

```{r task3setup, include = solution, class = "solution"}
# With example numbers; yours will be different!
people <- 45
blueshirt <- 12
```

Next we will practice using inline code. Try to do this **using only R commands and objects** - do not enter any numbers in the text directly! For example, instead of writing "Today is Tuesday" (when it will not be Tuesday when you read this!), I could write `` `r knitr::inline_expr("Sys.Date() %>% weekdays()")` ``, which should produce the current day of the week whenever you knit it. To see how inline text will appear when you knit your document, place your cursor inside the blue code text and push ctrl + enter to run that code.

`r subtask` Use inline code to complete the text below by replacing all of the text in square brackets.

It is currently [replace with current day]. There are [replace using object] people around me, [replace using calculation]% of whom are wearing blue. 

<!-- solution
It is currently `` `r knitr::inline_expr("Sys.Date() %>% weekdays()")` ``. There are 
`` `r knitr::inline_expr("people")` `` people around me, `` `r knitr::inline_expr("(blueshirt/people*100) %>% round(2)")` ``% of whom are wearing blue.

This should appear as:

It is currently `r Sys.Date() %>% weekdays()`. There are `r people` people around me, `r (blueshirt/people*100) %>% round(2)`% of whom are wearing blue. 
-->

`r subtask()` **Challenge**: Complete the report below using the data from Task 1.

Analysis of the dataset `ToothGrowth` revealed that the high-dose group had a mean length of [replace with mean of high dose group] and the mid-dose group had a standard deviation of [replace with sd of mid-dose group]. The overall mean length in the original dataset was [replace with mean of `len` in `tooth_tib`].

<!-- solution
Analysis of the dataset `ToothGrowth` revealed that the high-dose group had a mean length of `` `r knitr::inline_expr("tooth_sum %>% filter(dose == "high") %>% magrittr::extract2("mean") %>% round(2)")` `` and the mid-dose group had a standard deviation of `` `r knitr::inline_expr("tooth_sum %>% filter(dose == "mid") %>% magrittr::extract2("sd") %>% round(2)")` ``. The overall mean length in the original dataset was `` `r knitr::inline_expr("tooth_tib %>% summarise(mean = mean(len)) %>% magrittr::extract2("mean") %>% round(2)")` ``.

This should appear as, for example:

Analysis of the dataset `ToothGrowth` revealed that the high-dose group had a mean length of `r tooth_sum %>% filter(dose == "high") %>% magrittr::extract2("mean") %>% round(2)` and the mid-dose group had a standard deviation of `r tooth_sum %>% filter(dose == "mid") %>% magrittr::extract2("sd") %>% round(2)`. The overall mean length in the original dataset was `r tooth_tib %>% summarise(mean = mean(len)) %>% magrittr::extract2("mean") %>% round(2)`.
-->

**Hints**:

* Think about inline code the same way as code in code chunks. You can create multiple commands, linked by `%>%`, to get to the right value.
* Use `magrittr::extract2("name_of_variable")` to extract a particular value from a column in a tibble.
