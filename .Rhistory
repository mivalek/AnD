getwd()
remotes::install_github("mivalek/teachR")
library(teachR)
remove.packages("teachR", lib="~/R/win-library/3.6")
remotes::install_github("mivalek/teachR")
library(teachR)
getwd()
slidify("./lectures/lecture_1_intro.Rmd", course = "and", colour = "#008080")
slidify("./lectures/lecture_1_intro.Rmd", course = "and", colour = "#008080")
slidify("./lectures/lecture_1_intro.Rmd", course = "and")
library(teachR)
library(teachR)
slidify("./lectures/lecture_1_intro.Rmd", course = "and")
slidify("./lectures/lecture_1_intro.Rmd", course = "and", colour = "#008080", incremental = T)
105*.045 + 105
105*.046 + 105
105*.047 + 105
105*.048 + 105
slidify("./lectures/lecture_1_intro.Rmd", course = "and", colour = "#008080", incremental = T)
handout("./lectures/lecture_1_intro.Rmd", course = "and", colour = "#008080")
install.packages("sussex.fix")
remotes::install_github("ljcolling/sussex.fix")
remotes::install_github("ljcolling/sussexfix")
remotes::install_github("ljcolling/sussex")
remotes::install_github("ljcolling/sussexfun")
source(url("https://tinyurl.com/sussexfun"))
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and")
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
library(teachR)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and", solution = T, tasks_to_headings = T)
get(wd)
getwd()
slidify("./practicals/practical_1_guided.Rmd", course = "and")
library(teachR)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and")
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and")
debug(make.sheet)
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and")
make.sheet("./practicals/practical_1_wkst.Rmd", course = "and")
render(input = temp_rmd, output_format = html_document(toc = toc,
toc_depth = toc_depth, toc_float = toc_float, fig_width = fig_width,
fig_height = fig_height, highlight = highlight,
includes = includes(after_body = c(css, js)), ...),
intermediates_dir = tempdir())
temp_rmd
tempdir()
path()
rstudioapi::getSourceEditorContext()$path
getwd()
rstudioapi::getSourceEditorContext()$path
library(tidyverse)
library(kableExtra)
library(cowplot)
library(weights)
library(GGally)
library(broom)
knitr::opts_chunk$set(echo = T, fig.height=4, fig.width=5, fig.align = "center", message = F, warning = F, sol = T)
# Use the same kind of syntax as we have seen with other dplyr functions
# new_variable_name = existing_variable_name
gensex <- gensex %>%
rename(gen_comf = Gender_comfortable_1, gen_masc = Gender_masc_1, gen_fem = Gender_fem_1,
gen_stab = Gender_stability_1,
sex_str = Sexual_strength_1, sex_freq = Sexual_fewq_1, sex_pref = Sexual_gender_1,
rom_str = Romantic_strength_1, rom_freq = Romantic_freq_1, rom_pref = Romantic_gender_1)
gensex <- read_csv("https://mivalek.github.io/adata/gen_sex_q.csv")
# recode age and gender
gensex <- gensex %>%
mutate(Age = recode(Age, "18 years" = "18", "19 years old" = "19"),
Age = as.numeric(Age),
Gender = factor(Gender))
# count how many cases you're about to remove
age_removed <- gensex %>% filter(Age > 99) %>% nrow()
# count how many you're about to remove
all_missing <- gensex %>% filter(rowSums(is.na(gensex)) > 10) %>% nrow()
# remove them
gensex <- gensex %>% filter(Age < 100 & rowSums(is.na(gensex)) < 11)
# Use the same kind of syntax as we have seen with other dplyr functions
# new_variable_name = existing_variable_name
gensex <- gensex %>%
rename(gen_comf = Gender_comfortable_1, gen_masc = Gender_masc_1, gen_fem = Gender_fem_1,
gen_stab = Gender_stability_1,
sex_str = Sexual_strength_1, sex_freq = Sexual_fewq_1, sex_pref = Sexual_gender_1,
rom_str = Romantic_strength_1, rom_freq = Romantic_freq_1, rom_pref = Romantic_gender_1)
# Call your dataset to check this has worked!
cor.test(gensex$gen_fem, gensex$gen_masc)
corr(gensex$gen_fem, gensex$gen_masc) %>%
corr(gensex$gen_fem, gensex$gen_masc)
cor(gensex$gen_fem, gensex$gen_masc)
cor(gensex$gen_masc, gensex$gen_fem)
gensex %>% lm(gen_masc ~ gen_fem., )
gensex %>% lm(gen_masc ~ gen_fem)
gensex %>% lm(gen_masc ~ gen_fem, .)
lm(gen_fem ~ gen_masc, gensex)
library(teachR)
make.sheet("report/report_faq.rmd", "and")
library(teachR)
make.sheet("report/report_faq.rmd", "fun_ind")
make.sheet("report/report_faq.rmd", "fun_ind")
make.sheet("report/report_faq.rmd", "fun_ind")
?t.test
getOption(na.action)
getOption("na.action")
make.sheet("report/report_faq.rmd", "fun_ind")
make.sheet("report/report_faq.rmd", "fun_ind")
make.sheet("report/report_faq.rmd", "fun_ind")
library(teachR)
library(teachR)
make.sheet("report/report_faq.rmd", "fun_ind")
library(teachR)
make.sheet("exam/exam_revision_guide.rmd", "and")
make.sheet("exam/exam_revision_guide.rmd", "and")
make.sheet("exam/exam_revision_guide.rmd", "and")
make.sheet("exam/exam_revision_guide.rmd", "and")
?scale_y_continuous
library(tidyverse)
?scale_y_continuous
library(teachR)
make.sheet("tut_01_fundamentals.Rmd", "and", solution = T)
getwd
getwd()
make.sheet("tutorials/tut_01_fundamentals.Rmd", "and", solution = T)
make.sheet("tutorials/tut_01_fundamentals.Rmd", "and", solution = T)
make.sheet("tutorials/tut_01_fundamentals.Rmd", "and", solution = T)
library(teachR)
make.sheet("tutorials/tut_01_fundamentals.Rmd", "and", solution = T)
getwd()
make.sheet("tut_01_fundamentals.Rmd", "and", solution = T)
make.sheet("tutorials/tut_01_fundamentals.Rmd", "and", solution = T)
make.sheet("tutorials/tut_01_fundamentals.Rmd", "and", solution = T)
detach("package:weights", unload = TRUE)
make.sheet("tutorials/tut_01_fundamentals.Rmd", "and", solution = T)
install.packages(c("tidyverse", "Hmisc", "colortools", "cowplot", "weights", "kableExtra"))
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE, eval=F)
# installing from GitHub requires either package remotes or devtools
remotes::install_github("daranzolin/rcanvas")
install.packages("remotes")
# installing from GitHub requires either package remotes or devtools
remotes::install_github("daranzolin/rcanvas")
install.packages("googlesheets4")
remotes::install_github("mivalek/teachR")
remotes::install_github("mivalek/adata")
library(teachR)
getwd()
make.sheet("exam/exam_revision_guide.Rmd", "and")
make.sheet("exam/exam_revision_guide.Rmd", "and")
make.sheet("exam/exam_revision_guide.Rmd", "and")
make.sheet("exam/exam_revision_guide.Rmd", "and")
120 + (120*.25) + 30
120 + (120*.5) + 30
(120 + (120*.5) + 30)/60
# setting up default code chunk behaviour
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, error = T)
library(Hmisc)
library(tidyverse)
#make.sheet("tutorials/tut_01_fundamentals.Rmd", "and", solution = T)
ages <- c(31, 26, 61, 87)
ages <- c(31, 26, 61, 87)
class(ages)
class("ages")
make.sheet("tutorials/tut_01_fundamentals.Rmd", "and", solution = T)
library(teachR)
make.sheet("tutorials/tut_01_fundamentals.Rmd", "and", solution = T)
library(tidyverse)
library(kableExtra)
library(cowplot)
library(weights)
library(Hmisc)
knitr::opts_chunk$set(echo = T, fig.height=4, fig.width=5, fig.align = "center", message = F, warning = F, toggle = F)
gensex <- read_csv("https://mivalek.github.io/adata/gen_sex_q.csv")
# recode age and gender
gensex <- gensex %>%
mutate(Age = recode(Age, "18 years" = "18", "19 years old" = "19"),
Age = as.numeric(Age),
Gender = factor(Gender))
# count how many cases you're about to remove
age_removed <- gensex %>% filter(Age > 99) %>% nrow()
# count how many you're about to remove
all_missing <- gensex %>% filter(rowSums(is.na(gensex)) > 10) %>% nrow()
# remove them
gensex <- gensex %>% filter(Age < 100 & rowSums(is.na(gensex)) < 11)
# Use the same kind of syntax as we have seen with other dplyr functions
# new_variable_name = existing_variable_name
gensex <- gensex %>%
rename(gen_comf = Gender_comfortable_1, gen_masc = Gender_masc_1, gen_fem = Gender_fem_1,
gen_stab = Gender_stability_1,
sex_str = Sexual_strength_1, sex_freq = Sexual_fewq_1, sex_pref = Sexual_gender_1,
rom_str = Romantic_strength_1, rom_freq = Romantic_freq_1, rom_pref = Romantic_gender_1)
# Call your dataset to check this has worked!
?cor
cor(gensex$gen_comf, gensex$gen_stab, method = "pearson")
cor(gensex$gen_comf, gensex$gen_stab, method = "pearson", na.rm = TRUE)
mean(67,75,53,68)
library (teachR)
make.sheet("report/report_faq.rmd", course="fun_ind")
remotes::install_github("mivalek/teachR")
library (teachR)
make.sheet("report/report_faq.rmd", course="fun_ind")
make.sheet("tutorials/tut_07_ttest.Rmd", "and", solution = T)
make.sheet("tutorials/tut_07_ttest.Rmd", "and", solution = T)
make.sheet("tutorials/tut_07_ttest.Rmd", "and")
read_csv("admin/marking_approx.csv") %>%
kable() %>%
kable_styling()
# setting up default code chunk behaviour
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, error = T)
library(kableExtra)
library(tidyverse)
#slidify("admin/calibration_2020.Rmd", colour = "#008080", incremental = =T)
read_csv("admin/marking_approx.csv") %>%
kable() %>%
kable_styling()
read_csv("marking_approx.csv") %>%
kable() %>%
kable_styling()
read_csv("marking_approx.csv") %>%
kable() %>%
kable_styling()
library(teachR)
slidify("admin/calibration_2020.Rmd", colour = "#008080", incremental =T)
slidify("calibration_2020.Rmd", colour = "#008080", incremental =T)
slidify("calibration_2020.Rmd", course = "and", colour = "#008080", incremental =T)
slidify("calibration_2020.Rmd", course = "and", colour = "#008080", incremental =T)
slidify("admin/calibration_2020.Rmd", course = "and", colour = "#008080", incremental =T)
slidify("admin/calibration_2020.Rmd", course = "and", colour = "#008080", incremental =T)
